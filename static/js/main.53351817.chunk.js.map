{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","App","useState","newTodos","setNewTodos","userToChoose","setUserToChoose","hasEmptyUserField","setHasEmptyUserField","todoTitle","setTodoTitle","hasEmptyTitleField","setHasEmptyTitleField","action","method","onSubmit","e","curTodos","preventDefault","trim","reduce","prevTodo","currentTodo","prevTodos","htmlFor","placeholder","type","value","onChange","cleanedValue","target","replace","trimStart","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53351817.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user: { name, email } }) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import { UserInfo } from '../UserInfo';\nimport { ToDo } from '../../types/ToDo';\n\ntype Props = {\n  todo: ToDo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo: {\n    id,\n    title,\n    completed,\n    user,\n  },\n}) => (\n  <li\n    className={`TodoInfo ${completed && 'TodoInfo--completed'}`}\n    data-cy={id}\n  >\n    <h2 className=\"TodoInfo__title\">{title}</h2>\n\n    {user && <UserInfo user={user} />}\n  </li>\n);\n","import { TodoInfo } from '../TodoInfo';\nimport { ToDo } from '../../types/ToDo';\n\ntype Props = {\n  todos: ToDo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <ul className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </ul>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\n\nimport { User } from './types/User';\nimport { ToDo } from './types/ToDo';\n\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserById(userId: number) {\n  return usersFromServer.find((user: User) => user.id === userId)\n      || null;\n}\n\nconst todos = todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nconst findMaxTodoId = (curTodos: ToDo[]) => {\n  return curTodos.reduce((prevTodo, currentTodo) => {\n    return prevTodo.id > currentTodo.id ? prevTodo : currentTodo;\n  }, curTodos[0]);\n};\n\nexport const App = () => {\n  const [newTodos, setNewTodos] = useState(todos);\n  const [userToChoose, setUserToChoose] = useState(0);\n  const [hasEmptyUserField, setHasEmptyUserField] = useState(false);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [hasEmptyTitleField, setHasEmptyTitleField] = useState(false);\n\n  const onAddTodo = (todo: ToDo) => {\n    setNewTodos(prevTodos => [...prevTodos, todo]);\n  };\n\n  const resetForm = () => {\n    setTodoTitle('');\n    setUserToChoose(0);\n  };\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    const cleanedValue = value\n      .replace(/[^a-zA-Z0-9а-щА-ЩЬьЮюЯяЇїІіЄєҐґ\\s ]/g, '')\n      .trimStart();\n\n    setHasEmptyTitleField(false);\n    setTodoTitle(cleanedValue);\n  };\n\n  const handleUserChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setHasEmptyUserField(false);\n    setUserToChoose(Number(e.target.value));\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!todoTitle.trim()) {\n      setHasEmptyTitleField(true);\n    }\n\n    if (userToChoose === 0) {\n      setHasEmptyUserField(true);\n    }\n\n    if (!todoTitle.trim() || userToChoose === 0) {\n      return;\n    }\n\n    onAddTodo({\n      id: findMaxTodoId(newTodos).id + 1,\n      title: todoTitle,\n      completed: false,\n      userId: userToChoose,\n      user: getUserById(userToChoose),\n    });\n\n    resetForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n          <input\n            id=\"titleInput\"\n            placeholder=\"Enter a title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={todoTitle}\n            onChange={handleTitleChange}\n          />\n          {hasEmptyTitleField && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            id=\"userSelect\"\n            data-cy=\"userSelect\"\n            value={userToChoose}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map((user: User) => {\n              const { id, name } = user;\n\n              return (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              );\n            })}\n          </select>\n\n          {hasEmptyUserField && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={newTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}